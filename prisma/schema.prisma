generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  telegramId   String        @unique
  username     String?
  firstName    String?
  lastName     String?
  profilePic   String?
  isSubscribed Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  articles     Article[]
  airdropTasks UserAirdrop[]
  referrals    Referral[]    @relation("Referrer")
  referredBy   Referral?     @relation("Referred")
  ArticleView  ArticleView[]
  AirdropView  AirdropView[]
}

model Article {
  id         Int     @id @default(autoincrement())
  title      String
  subtitle   String
  content    String
  conclusion String?
  views      Int     @default(0)
  createdBy   Int
  author      User              @relation(fields: [createdBy], references: [id])
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  categories  ArticleCategory[]
  tags        ArticleTag[]
  ArticleView ArticleView[]
}

model Airdrop {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  isActive     Boolean       @default(true)
  views        Int           @default(0)
  startDate    DateTime
  endDate      DateTime
  prizePool    Float
  tasks        Task[]
  participants UserAirdrop[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  AirdropView AirdropView[]
}

model Task {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  isCompleted Boolean @default(false)
  airdropId   Int
  airdrop     Airdrop @relation(fields: [airdropId], references: [id])
}

model UserAirdrop {
  userId         Int
  airdropId      Int
  tasksCompleted Int      @default(0)
  referredUsers  Int      @default(0)
  user           User     @relation(fields: [userId], references: [id])
  airdrop        Airdrop  @relation(fields: [airdropId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@id([userId, airdropId])
}

model Category {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  articles    ArticleCategory[]
}

model ArticleCategory {
  articleId  Int
  categoryId Int
  article    Article  @relation(fields: [articleId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([articleId, categoryId])
}

model Tag {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  articles    ArticleTag[]
}

model ArticleTag {
  articleId Int
  tagId     Int
  article   Article @relation(fields: [articleId], references: [id])
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@id([articleId, tagId])
}

model Referral {
  id           Int      @id @default(autoincrement())
  referralLink String   @unique
  referrerId   Int
  referredId   Int?     @unique
  referrer     User     @relation("Referrer", fields: [referrerId], references: [id])
  referred     User?    @relation("Referred", fields: [referredId], references: [id])
  createdAt    DateTime @default(now())
}

model Advertisement {
  id          Int      @id @default(autoincrement())
  imageUrl    String
  redirectUrl String
  isActive    Boolean  @default(true)
  clicks      Int      @default(0)
  impressions Int      @default(0)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ArticleView {
  id        Int     @id @default(autoincrement())
  userId    Int
  articleId Int
  user      User    @relation(fields: [userId], references: [id])
  article   Article @relation(fields: [articleId], references: [id])

  @@unique([userId, articleId]) // Ensure a user can only view an article once
}

model AirdropView {
  id        Int     @id @default(autoincrement())
  userId    Int
  airdropId Int
  user      User    @relation(fields: [userId], references: [id])
  airdrop   Airdrop @relation(fields: [airdropId], references: [id])

  @@unique([userId, airdropId]) // Ensure a user can only view an airdrop once
}
