generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  MODERATOR
  USER
}

model User {
  id            Int             @id @default(autoincrement())
  telegramId    String          @unique
  username      String?
  firstName     String?
  lastName      String?
  isSubscribed  Boolean         @default(false)
  photo_url     String?
  role          Role            @default(USER) // New field for roles
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  airdrops      UserAirdrop[]
  referrals     Referral[]      @relation("Referrer")
  referredBy    Referral?       @relation("Referred")
  articles      Article[]
  ArticleView   ArticleView[]
  AirdropView   AirdropView[]
  ArticleRating ArticleRating[]
  ScamReports   ScamReport[]
  lastOnline    DateTime[]
}

model Article {
  id            Int               @id @default(autoincrement())
  title         String
  subtitle      String?
  content       Json
  isActive      Boolean           @default(true)
  conclusion    String?
  publishDate   DateTime?
  authorId      Int?
  author        User?             @relation(fields: [authorId], references: [id])
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  categories    ArticleCategory[]
  ArticleTag    ArticleTag[]
  ArticleView   ArticleView[]
  status        String            @default("Draft")
  views         Int               @default(0)
  avgRating     Float             @default(0)
  totalRatings  Int               @default(0)
  ArticleMedia  ArticleMedia[]
  ScamReports   ScamReport[] // Ensure this is correctly defined
  ArticleRating ArticleRating[]
}

model ScamReport {
  id           Int      @id @default(autoincrement())
  articleId    Int
  article      Article  @relation(fields: [articleId], references: [id])
  reason       String
  proof        String?
  createdAt    DateTime @default(now())
  reportedById Int
  reportedBy   User     @relation(fields: [reportedById], references: [id])
}

model Airdrop {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean       @default(true)
  prizePool    Float
  tasks        Task[]
  participants UserAirdrop[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Referral     Referral[]
  AirdropView  AirdropView[]
}

model Task {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  isCompleted Boolean @default(false)
  airdropId   Int
  airdrop     Airdrop @relation(fields: [airdropId], references: [id])
}

model UserAirdrop {
  userId         Int
  airdropId      Int
  tasksCompleted Int     @default(0)
  referredUsers  Int     @default(0)
  user           User    @relation(fields: [userId], references: [id])
  airdrop        Airdrop @relation(fields: [airdropId], references: [id])

  @@id([userId, airdropId])
}

model Referral {
  id           Int      @id @default(autoincrement())
  referralLink String   @unique
  referrerId   Int
  referredId   Int?     @unique
  airdropId    Int
  referrer     User     @relation("Referrer", fields: [referrerId], references: [id])
  referred     User?    @relation("Referred", fields: [referredId], references: [id])
  airdrop      Airdrop  @relation(fields: [airdropId], references: [id])
  createdAt    DateTime @default(now())
}

model ArticleRating {
  id        Int     @id @default(autoincrement())
  userId    Int
  articleId Int
  rating    Int
  user      User    @relation(fields: [userId], references: [id])
  article   Article @relation(fields: [articleId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, articleId])
}

model ArticleMedia {
  id        Int     @id @default(autoincrement())
  articleId Int
  imageUrl  String
  article   Article @relation(fields: [articleId], references: [id])
}

model Category {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  articles    ArticleCategory[]
}

model ArticleCategory {
  id         Int      @id @default(autoincrement())
  articleId  Int
  categoryId Int
  article    Article  @relation(fields: [articleId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@unique([articleId, categoryId])
}

model Advertisement {
  id          Int      @id @default(autoincrement())
  imageUrl    String
  redirectUrl String
  isActive    Boolean  @default(true)
  startDate   DateTime
  endDate     DateTime
  clicks      Int      @default(0)
  impressions Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tag {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  articles    ArticleTag[]
}

model ArticleTag {
  articleId Int
  tagId     Int
  article   Article @relation(fields: [articleId], references: [id])
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@id([articleId, tagId])
}

model ArticleView {
  userId    Int
  articleId Int
  user      User    @relation(fields: [userId], references: [id])
  article   Article @relation(fields: [articleId], references: [id])

  @@id([userId, articleId])
}

model AirdropView {
  userId    Int
  airdropId Int
  user      User    @relation(fields: [userId], references: [id])
  airdrop   Airdrop @relation(fields: [airdropId], references: [id])

  @@id([userId, airdropId])
}
